package redis

import (
	"errors"
	"net/http"
	"reflect"
	"testing"

	redis "gopkg.in/redis.v4"

	"github.com/labstack/echo"
	"github.com/labstack/echo/test"
)

func TestMiddleware(t *testing.T) {
	e := echo.New()
	req := test.NewRequest(echo.GET, "/", nil)
	rec := test.NewResponseRecorder()
	ctx := e.NewContext(req, rec)
	handler := Middleware(&redis.Options{})(func(ctx echo.Context) error {
		return ctx.String(http.StatusOK, "test")
	})

	handler(ctx)
	client := ctx.Get("redis.client")

	if client == nil {
		t.Error("Expected redis client, got nil")
	}
}

func TestFromContext(t *testing.T) {
	tt := []struct {
		client Client

		expectedClient Client
		expectedErr    error
	}{
		{
			nil,
			nil,
			errors.New("<nil> is not a Client"),
		},
		{
			&client{},
			&client{},
			nil,
		},
	}

	for _, tc := range tt {
		e := echo.New()
		ctx := e.NewContext(nil, nil)
		ctx.Set("redis.client", tc.client)

		client, err := FromContext(ctx)

		if !reflect.DeepEqual(tc.expectedClient, client) {
			t.Errorf("expected %#v, got %#v", tc.expectedClient, client)
		}

		if !reflect.DeepEqual(tc.expectedErr, err) {
			t.Errorf("expected %#v, got %#v", tc.expectedErr, err)
		}
	}
}
