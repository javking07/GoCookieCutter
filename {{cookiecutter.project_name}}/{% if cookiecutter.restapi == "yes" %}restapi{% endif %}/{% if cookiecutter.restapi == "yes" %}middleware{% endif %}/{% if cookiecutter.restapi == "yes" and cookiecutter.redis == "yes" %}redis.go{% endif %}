// Redis Echo Middleare

package middleware

import (
	"fmt"
	"reflect"

	"{{ cookiecutter.project_name|lower }}/redis"

	"github.com/labstack/echo"
)

// Returns a redis client from a given echo context
func RedisFromCtx(ctx echo.Context) (redis.Client, error) {
	v := ctx.Get("redis.client")
	client, ok := v.(Client)
	if !ok {
		return nil, fmt.Errorf("%v is not a Client", reflect.TypeOf(v))
	}

	return client, nil
}

// Opens a redis connection to the configured redis server
// and places the connection on the request context
func RedisClient(config *redis.Options) echo.MiddlewareFunc {
	return func(next echo.HandlerFunc) echo.HandlerFunc {
		return func(ctx echo.Context) error {
			// Create a new redis client
			client := redis.NewClient(config)
			defer client.Close()

			// Add the client to the session, and serve the next handler
			ctx.Set("redis.client", client)

			return next(ctx)
		}
	}
}
